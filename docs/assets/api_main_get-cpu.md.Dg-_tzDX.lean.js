import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.Cv6Grnpd.js";const k=JSON.parse('{"title":"getCPU(): ICPU","description":"","frontmatter":{},"headers":[],"relativePath":"api/main/get-cpu.md","filePath":"api/main/get-cpu.md","lastUpdated":1734097810000}'),n={name:"api/main/get-cpu.md"};function l(p,a,r,h,c,o){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="getcpu-icpu" tabindex="-1"><code>getCPU(): ICPU</code> <a class="header-anchor" href="#getcpu-icpu" aria-label="Permalink to &quot;`getCPU(): ICPU`&quot;">​</a></h1><p>Get type of CPU architecture from user-agent string.</p><h2 id="properties-of-icpu" tabindex="-1">Properties of <code>ICPU</code> <a class="header-anchor" href="#properties-of-icpu" aria-label="Permalink to &quot;Properties of `ICPU`&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CPU object is structured as follow:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    architecture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="architecture-string" tabindex="-1"><code>architecture?: string</code> <a class="header-anchor" href="#architecture-string" aria-label="Permalink to &quot;`architecture?: string`&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>See list of possible cpu architecture <a href="/info/cpu/arch.html">here</a>.</p></div><h2 id="methods-of-icpu" tabindex="-1">Methods of <code>ICPU</code> <a class="header-anchor" href="#methods-of-icpu" aria-label="Permalink to &quot;Methods of `ICPU`&quot;">​</a></h2><p>Inherited from <code>IData</code>:</p><ul><li><a href="/api/main/idata/is.html"><code>is(value: string): boolean</code></a></li><li><a href="/api/main/idata/to-string.html"><code>toString(): string</code></a></li><li><a href="/api/main/idata/with-client-hints.html"><code>withClientHints&lt;ICPU&gt;(): PromiseLike&lt;ICPU&gt; | ICPU</code></a></li><li><a href="/api/main/idata/with-feature-check.html"><code>withFeatureCheck&lt;ICPU&gt;(): PromiseLike&lt;ICPU&gt; | ICPU</code></a></li></ul><h2 id="code-example" tabindex="-1">Code Example <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;Code Example&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> powerpc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Mozilla/4.0 (compatible; MSIE 5.17; Mac_PowerPC Mac OS; en)&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UAParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(powerpc);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPU</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { architecture : &quot;ppc&quot; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',11)]))}const u=s(n,[["render",l]]);export{k as __pageData,u as default};
