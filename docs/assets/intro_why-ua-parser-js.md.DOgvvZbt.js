import{_ as i,c as a,o as n,ag as e,ah as t}from"./chunks/framework.CSiu8Pll.js";const g=JSON.parse('{"title":"Why UAParser.js?","description":"","frontmatter":{},"headers":[],"relativePath":"intro/why-ua-parser-js.md","filePath":"intro/why-ua-parser-js.md","lastUpdated":1758899276000}'),l={name:"intro/why-ua-parser-js.md"};function p(h,s,r,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="why-uaparser-js" tabindex="-1">Why UAParser.js? <a class="header-anchor" href="#why-uaparser-js" aria-label="Permalink to “Why UAParser.js?”">​</a></h1><p>UAParser.js simplifies user-agent detection by providing a <ins><strong>structured approach</strong></ins>, offering a clean alternative to the unstructured mess of real-world user-agent strings.</p><h2 id="user-agent-detection-is-hard" tabindex="-1">User-agent detection is hard <a class="header-anchor" href="#user-agent-detection-is-hard" aria-label="Permalink to “User-agent detection is hard”">​</a></h2><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="problem.js">problem.js</span></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Consider we got this user-agent from a visitor:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ua</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Mozilla/5.0 (Linux; Android 10; STK-LX1 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build/HONORSTK-LX1; wv) AppleWebKit/537.36 (KHTML, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">like Gecko) Version/4.0 Chrome/110.0.5481.153 Mobile </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Safari/537.36 musical_ly_2022803040 JsSdk/1.0 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NetType/WIFI Channel/huaweiadsglobal_int </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AppName/musical_ly app_version/28.3.4 ByteLocale/en </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ByteFullLocale/en Region/IQ Spark/1.2.7-alpha.8 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AppVersion/28.3.4 PIA/1.5.11 BytedanceWebview/d8a21c6\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// yes, this is a real user-agent (what???)</span></span></code></pre></div></div><p>No worries, let&#39;s just use UAParser.js now</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="solution.js">solution.js</span></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Just pass the complex user-agent string to \`UAParser\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UAParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ua);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Result:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// And voila!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name : &quot;TikTok&quot;, version : &quot;28.3.4&quot;, major : &quot;28&quot;, type: &quot;inapp&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name : &quot;Blink&quot;, version : &quot;110.0.5481.153&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { type : &quot;mobile&quot;, vendor : &quot;Huawei&quot;, model : &quot;STK-LX1&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name : &quot;Android&quot;, version : &quot;10&quot; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Conclusion:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The visitor is browsing from TikTok app using a Huawei device</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Phew! Thanks, UAParser.js!</span></span></code></pre></div></div><h2 id="illustration" tabindex="-1">Illustration <a class="header-anchor" href="#illustration" aria-label="Permalink to “Illustration”">​</a></h2><p>UAParser.js <em>automagically</em> breaks down a complicated user-agent string into a <ins><strong>well-structured</strong></ins> data:</p><p><img src="`+t+'" alt="Illustration"></p>',9)]))}const u=i(l,[["render",p]]);export{g as __pageData,u as default};
